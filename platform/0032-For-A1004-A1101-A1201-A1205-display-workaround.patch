From 6af4168afd748b1448d81bba28e5c7b97ef3ec51 Mon Sep 17 00:00:00 2001
From: Huacai Chen <chenhc@lemote.com>
Date: Wed, 6 Nov 2013 15:19:05 +0800
Subject: [PATCH 032/130] For A1004/A1101/A1201/A1205 display workaround.

1, Do not enable LVDS(A1004)/VGA(A1101) output until modeset init,
   to workaround strange display. It has flash-line sometimes.
2, Turn off A1201/A1205's lvds before gpu initilization and turn on it
   after that.

Change-Id: Id897b90320255ac49e29740871e4246610017dcc
Signed-off-by: Huacai Chen <chenhc@lemote.com>
Signed-off-by: Hongliang Tao <taohl@lemote.com>
Signed-off-by: Hua Yan <yanh@lemote.com>
Signed-off-by: Zhang Shuangshuang <zhangshuangshuang@ict.ac.cn>
---
 .../mips/include/asm/mach-loongson64/workarounds.h |  2 ++
 arch/mips/loongson64/loongson-3/Makefile           |  2 +-
 arch/mips/loongson64/loongson-3/platform.c         | 10 ++++++
 arch/mips/loongson64/loongson-3/workarounds.c      | 37 ++++++++++++++++++++++
 drivers/gpu/drm/drm_crtc_helper.c                  | 12 +++++++
 drivers/gpu/drm/radeon/radeon_kms.c                | 11 +++++++
 6 files changed, 73 insertions(+), 1 deletion(-)
 create mode 100644 arch/mips/loongson64/loongson-3/workarounds.c

diff --git a/arch/mips/include/asm/mach-loongson64/workarounds.h b/arch/mips/include/asm/mach-loongson64/workarounds.h
index e659f041..0cb7541b 100644
--- a/arch/mips/include/asm/mach-loongson64/workarounds.h
+++ b/arch/mips/include/asm/mach-loongson64/workarounds.h
@@ -3,5 +3,7 @@
 
 #define WORKAROUND_CPUFREQ	0x00000001
 #define WORKAROUND_CPUHOTPLUG	0x00000002
+#define WORKAROUND_LVDS_EC 	0x00000004
+#define WORKAROUND_LVDS_GPIO	0x00000008
 
 #endif
diff --git a/arch/mips/loongson64/loongson-3/Makefile b/arch/mips/loongson64/loongson-3/Makefile
index 5600df6e..9c8f5812 100644
--- a/arch/mips/loongson64/loongson-3/Makefile
+++ b/arch/mips/loongson64/loongson-3/Makefile
@@ -1,7 +1,7 @@
 #
 # Makefile for Loongson-3 family machines
 #
-obj-y			+= irq.o cop2-ex.o platform.o acpi_init.o clock.o ec_wpce775l.o
+obj-y			+= irq.o cop2-ex.o platform.o acpi_init.o clock.o ec_wpce775l.o workarounds.o
 
 obj-$(CONFIG_SMP)	+= smp.o
 
diff --git a/arch/mips/loongson64/loongson-3/platform.c b/arch/mips/loongson64/loongson-3/platform.c
index 890348eb..4f1486d1 100644
--- a/arch/mips/loongson64/loongson-3/platform.c
+++ b/arch/mips/loongson64/loongson-3/platform.c
@@ -10,6 +10,8 @@
  * option) any later version.
  */
 
+#include <linux/gpio.h>
+#include <linux/delay.h>
 #include <linux/err.h>
 #include <linux/slab.h>
 #include <linux/platform_device.h>
@@ -75,6 +77,9 @@ struct loongson_fan_policy constant_speed_policy = {
 	.type = CONSTANT_SPEED_POLICY,
 };
 
+#define GPIO_LCD_CNTL		5
+#define GPIO_BACKLIGHIT_CNTL	7
+
 static int __init loongson3_platform_init(void)
 {
 	int i;
@@ -94,6 +99,11 @@ static int __init loongson3_platform_init(void)
 		platform_device_register(pdev);
 	}
 
+	if (loongson_sysconf.workarounds & WORKAROUND_LVDS_GPIO) {
+		gpio_request(GPIO_LCD_CNTL,  "gpio_lcd_cntl");
+		gpio_request(GPIO_BACKLIGHIT_CNTL, "gpio_bl_cntl");
+	}
+
 	return 0;
 }
 
diff --git a/arch/mips/loongson64/loongson-3/workarounds.c b/arch/mips/loongson64/loongson-3/workarounds.c
new file mode 100644
index 00000000..13b26d17
--- /dev/null
+++ b/arch/mips/loongson64/loongson-3/workarounds.c
@@ -0,0 +1,37 @@
+#include <linux/delay.h>
+#include <linux/gpio.h>
+#include <asm/bootinfo.h>
+#include <ec_wpce775l.h>
+#include <workarounds.h>
+
+#define GPIO_LCD_CNTL		5
+#define GPIO_BACKLIGHIT_CNTL	7
+
+void gpio_lvds_off(void)
+{
+	gpio_direction_output(GPIO_BACKLIGHIT_CNTL, 0);
+	gpio_direction_output(GPIO_LCD_CNTL, 0);
+}
+
+static void gpio_lvds_on(void)
+{
+	gpio_direction_output(GPIO_LCD_CNTL, 1);
+	msleep(250);
+	gpio_direction_output(GPIO_BACKLIGHIT_CNTL, 1);
+}
+
+void turn_off_lvds(void)
+{
+	if (loongson_sysconf.workarounds & WORKAROUND_LVDS_EC)
+		ec_write(INDEX_BACKLIGHT_STSCTRL, BACKLIGHT_OFF);
+	if (loongson_sysconf.workarounds & WORKAROUND_LVDS_GPIO)
+		gpio_lvds_off();
+}
+
+void turn_on_lvds(void)
+{
+	if (loongson_sysconf.workarounds & WORKAROUND_LVDS_EC)
+		ec_write(INDEX_BACKLIGHT_STSCTRL, BACKLIGHT_ON);
+	if (loongson_sysconf.workarounds & WORKAROUND_LVDS_GPIO)
+		gpio_lvds_on();
+}
diff --git a/drivers/gpu/drm/drm_crtc_helper.c b/drivers/gpu/drm/drm_crtc_helper.c
index ef534758..df43952f 100644
--- a/drivers/gpu/drm/drm_crtc_helper.c
+++ b/drivers/gpu/drm/drm_crtc_helper.c
@@ -753,6 +753,10 @@ static int drm_helper_choose_crtc_dpms(struct drm_crtc *crtc)
 	return dpms;
 }
 
+#ifdef CONFIG_CPU_LOONGSON3
+void turn_off_lvds(void);
+void turn_on_lvds(void);
+#endif
 /**
  * drm_helper_connector_dpms() - connector dpms helper implementation
  * @connector: affected connector
@@ -783,6 +787,10 @@ int drm_helper_connector_dpms(struct drm_connector *connector, int mode)
 
 	/* from off to on, do crtc then encoder */
 	if (mode < old_dpms) {
+#ifdef CONFIG_CPU_LOONGSON3
+		if(connector->connector_type == DRM_MODE_CONNECTOR_LVDS)
+			turn_on_lvds();
+#endif
 		if (crtc) {
 			const struct drm_crtc_helper_funcs *crtc_funcs = crtc->helper_private;
 			if (crtc_funcs->dpms)
@@ -795,6 +803,10 @@ int drm_helper_connector_dpms(struct drm_connector *connector, int mode)
 
 	/* from on to off, do encoder then crtc */
 	if (mode > old_dpms) {
+#ifdef CONFIG_CPU_LOONGSON3
+		if(connector->connector_type == DRM_MODE_CONNECTOR_LVDS)
+			turn_off_lvds();
+#endif
 		if (encoder)
 			drm_helper_encoder_dpms(encoder, encoder_dpms);
 		if (crtc) {
diff --git a/drivers/gpu/drm/radeon/radeon_kms.c b/drivers/gpu/drm/radeon/radeon_kms.c
index d290a8a0..4268f227 100644
--- a/drivers/gpu/drm/radeon/radeon_kms.c
+++ b/drivers/gpu/drm/radeon/radeon_kms.c
@@ -78,6 +78,10 @@ done_free:
 	return 0;
 }
 
+#ifdef CONFIG_CPU_LOONGSON3
+extern void turn_on_lvds(void);
+extern void turn_off_lvds(void);
+#endif
 /**
  * radeon_driver_load_kms - Main load function for KMS.
  *
@@ -96,6 +100,9 @@ int radeon_driver_load_kms(struct drm_device *dev, unsigned long flags)
 	struct radeon_device *rdev;
 	int r, acpi_status;
 
+#ifdef CONFIG_CPU_LOONGSON3
+	turn_off_lvds();
+#endif
 	rdev = kzalloc(sizeof(struct radeon_device), GFP_KERNEL);
 	if (rdev == NULL) {
 		return -ENOMEM;
@@ -136,6 +143,10 @@ int radeon_driver_load_kms(struct drm_device *dev, unsigned long flags)
 	if (r)
 		dev_err(&dev->pdev->dev, "Fatal error during modeset init\n");
 
+#ifdef CONFIG_CPU_LOONGSON3
+	turn_on_lvds();
+#endif
+
 	/* Call ACPI methods: require modeset init
 	 * but failure is not fatal
 	 */
-- 
2.11.0

