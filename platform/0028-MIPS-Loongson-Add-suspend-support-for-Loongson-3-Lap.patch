From 3d62d65b82cfa64c0ef9b50a03dd22025f476c25 Mon Sep 17 00:00:00 2001
From: Huacai Chen <chenhc@lemote.com>
Date: Wed, 6 Nov 2013 15:19:00 +0800
Subject: [PATCH 028/130] MIPS: Loongson: Add suspend support for Loongson-3
 Laptop.

Add standby and suspend functions for Loongson-3 based laptops.

Change-Id: I803bef00b36072ab699a3b89785f7dc5c643f4f8
Signed-off-by: Huacai Chen <chenhc@lemote.com>
Signed-off-by: Hongliang Tao <taohl@lemote.com>
Signed-off-by: Hua Yan <yanh@lemote.com>
Signed-off-by: Zhang Shuangshuang <zhangshuangshuang@ict.ac.cn>
---
 arch/mips/include/asm/mach-loongson64/loongson.h |   2 +
 arch/mips/loongson64/common/pm.c                 | 155 +++++++++++++++++---
 arch/mips/loongson64/lemote-2f/pm.c              |   4 +-
 arch/mips/loongson64/loongson-3/Makefile         |   2 +
 arch/mips/loongson64/loongson-3/acpi_init.c      |  29 ++++
 arch/mips/loongson64/loongson-3/pm.c             | 147 +++++++++++++++++++
 arch/mips/loongson64/loongson-3/sleep.S          | 172 +++++++++++++++++++++++
 7 files changed, 491 insertions(+), 20 deletions(-)
 create mode 100644 arch/mips/loongson64/loongson-3/pm.c
 create mode 100644 arch/mips/loongson64/loongson-3/sleep.S

diff --git a/arch/mips/include/asm/mach-loongson64/loongson.h b/arch/mips/include/asm/mach-loongson64/loongson.h
index 78d4d9cd..aa165e51 100644
--- a/arch/mips/include/asm/mach-loongson64/loongson.h
+++ b/arch/mips/include/asm/mach-loongson64/loongson.h
@@ -358,4 +358,6 @@ extern unsigned long _loongson_addrwincfg_base;
 
 #endif	/* ! CONFIG_CPU_SUPPORTS_ADDRWINCFG */
 
+void loongson_suspend_lowlevel(void);
+
 #endif /* __ASM_MACH_LOONGSON64_LOONGSON_H */
diff --git a/arch/mips/loongson64/common/pm.c b/arch/mips/loongson64/common/pm.c
index a6b67ccf..9ff5e74d 100644
--- a/arch/mips/loongson64/common/pm.c
+++ b/arch/mips/loongson64/common/pm.c
@@ -1,8 +1,9 @@
 /*
  * loongson-specific suspend support
  *
- *  Copyright (C) 2009 Lemote Inc.
+ *  Copyright (C) 2009 - 2012 Lemote Inc.
  *  Author: Wu Zhangjin <wuzhangjin@gmail.com>
+ *          Huacai Chen <chenhc@lemote.com>
  *
  * This program is free software; you can redistribute it and/or modify
  * it under the terms of the GNU General Public License as published by
@@ -15,13 +16,43 @@
 
 #include <asm/i8259.h>
 #include <asm/mipsregs.h>
+#include <asm/bootinfo.h>
 
 #include <loongson.h>
+#include <mc146818rtc.h>
 
 static unsigned int __maybe_unused cached_master_mask;	/* i8259A */
 static unsigned int __maybe_unused cached_slave_mask;
 static unsigned int __maybe_unused cached_bonito_irq_mask; /* bonito */
 
+u32 loongson_nr_nodes;
+u64 loongson_suspend_addr;
+u32 loongson_pcache_ways;
+u32 loongson_scache_ways;
+u32 loongson_pcache_sets;
+u32 loongson_scache_sets;
+u32 loongson_pcache_linesz;
+u32 loongson_scache_linesz;
+
+uint64_t cmos_read64(unsigned long addr)
+{
+	unsigned char bytes[8];
+	int i;
+
+	for (i=0; i<8; i++)
+		bytes[i] = CMOS_READ(addr + i);
+
+	return *(uint64_t *)bytes;
+}
+
+void cmos_write64(uint64_t data, unsigned long addr)
+{
+	int i;
+	unsigned char * bytes = (unsigned char *)&data;
+
+	for (i=0; i<8; i++)
+		CMOS_WRITE(bytes[i], addr + i);
+}
 void arch_suspend_disable_irqs(void)
 {
 	/* disable all mips events */
@@ -79,7 +110,19 @@ int __weak wakeup_loongson(void)
 static void wait_for_wakeup_events(void)
 {
 	while (!wakeup_loongson())
-		LOONGSON_CHIPCFG(0) &= ~0x7;
+		switch (read_c0_prid() & PRID_REV_MASK) {
+		case PRID_REV_LOONGSON2E:
+		case PRID_REV_LOONGSON2F:
+		case PRID_REV_LOONGSON3A_R1:
+		default:
+			LOONGSON_CHIPCFG(0) &= ~0x7;
+			break;
+		case PRID_REV_LOONGSON3A_R2:
+		case PRID_REV_LOONGSON3B_R1:
+		case PRID_REV_LOONGSON3B_R2:
+			LOONGSON_FREQCTRL(0) &= ~0x7;
+			break;
+		}
 }
 
 /*
@@ -89,7 +132,24 @@ static void wait_for_wakeup_events(void)
  */
 static inline void stop_perf_counters(void)
 {
-	__write_64bit_c0_register($24, 0, 0);
+	switch (read_c0_prid() & PRID_REV_MASK) {
+	case PRID_REV_LOONGSON2E:
+	case PRID_REV_LOONGSON2F:
+		__write_64bit_c0_register($24, 0, 0);
+		break;
+	case PRID_REV_LOONGSON3A_R1:
+	case PRID_REV_LOONGSON3B_R1:
+	case PRID_REV_LOONGSON3B_R2:
+		__write_64bit_c0_register($25, 0, 0xc0000000);
+		__write_64bit_c0_register($25, 2, 0x40000000);
+		break;
+	case PRID_REV_LOONGSON3A_R2:
+		__write_64bit_c0_register($25, 0, 0xc0000000);
+		__write_64bit_c0_register($25, 2, 0xc0000000);
+		__write_64bit_c0_register($25, 4, 0xc0000000);
+		__write_64bit_c0_register($25, 6, 0x40000000);
+		break;
+	}
 }
 
 
@@ -102,34 +162,69 @@ static void loongson_suspend_enter(void)
 
 	stop_perf_counters();
 
-	cached_cpu_freq = LOONGSON_CHIPCFG(0);
-
-	/* Put CPU into wait mode */
-	LOONGSON_CHIPCFG(0) &= ~0x7;
-
-	/* wait for the given events to wakeup cpu from wait mode */
-	wait_for_wakeup_events();
-
-	LOONGSON_CHIPCFG(0) = cached_cpu_freq;
+	switch (read_c0_prid() & PRID_REV_MASK) {
+	case PRID_REV_LOONGSON2E:
+	case PRID_REV_LOONGSON2F:
+	case PRID_REV_LOONGSON3A_R1:
+		cached_cpu_freq = LOONGSON_CHIPCFG(0);
+		/* Put CPU into wait mode */
+		LOONGSON_CHIPCFG(0) &= ~0x7;
+		/* wait for the given events to wakeup cpu from wait mode */
+		wait_for_wakeup_events();
+		LOONGSON_CHIPCFG(0) = cached_cpu_freq;
+		break;
+	case PRID_REV_LOONGSON3A_R2:
+	case PRID_REV_LOONGSON3B_R1:
+	case PRID_REV_LOONGSON3B_R2:
+		cached_cpu_freq = LOONGSON_FREQCTRL(0);
+		/* Put CPU into wait mode */
+		LOONGSON_FREQCTRL(0) &= ~0x7;
+		/* wait for the given events to wakeup cpu from wait mode */
+		wait_for_wakeup_events();
+		LOONGSON_FREQCTRL(0) = cached_cpu_freq;
+		break;
+	}
 	mmiowb();
 }
 
-void __weak mach_suspend(void)
+void __weak mach_suspend(suspend_state_t state)
 {
 }
 
-void __weak mach_resume(void)
+void __weak mach_resume(suspend_state_t state)
 {
 }
 
 static int loongson_pm_enter(suspend_state_t state)
 {
-	mach_suspend();
+	mach_suspend(state);
 
 	/* processor specific suspend */
-	loongson_suspend_enter();
+	switch(state){
+	case PM_SUSPEND_STANDBY:
+		loongson_suspend_enter();
+		break;
+	case PM_SUSPEND_MEM:
+#ifdef CONFIG_CPU_LOONGSON3
+		loongson_nr_nodes = loongson_sysconf.nr_nodes;
+		loongson_suspend_addr = loongson_sysconf.suspend_addr;
+		loongson_pcache_ways = cpu_data[0].dcache.ways;
+		loongson_scache_ways = cpu_data[0].scache.ways;
+		loongson_pcache_sets = cpu_data[0].dcache.sets;
+		loongson_scache_sets = cpu_data[0].scache.sets*4;
+		loongson_pcache_linesz = cpu_data[0].dcache.linesz;
+		loongson_scache_linesz = cpu_data[0].scache.linesz;
+		loongson_suspend_lowlevel();
+		cmos_write64(0x0, 0x40);  /* clear pc in cmos */
+		cmos_write64(0x0, 0x48);  /* clear sp in cmos */
+		pm_set_resume_via_firmware();
+#else
+		loongson_suspend_enter();
+#endif
+		break;
+	}
 
-	mach_resume();
+	mach_resume(state);
 
 	return 0;
 }
@@ -138,18 +233,42 @@ static int loongson_pm_valid_state(suspend_state_t state)
 {
 	switch (state) {
 	case PM_SUSPEND_ON:
+		return 1;
+
 	case PM_SUSPEND_STANDBY:
 	case PM_SUSPEND_MEM:
-		return 1;
+		switch (mips_machtype) {
+		case MACH_LEMOTE_ML2F7:
+		case MACH_LEMOTE_YL2F89:
+			return 1;
+		case MACH_LOONGSON_GENERIC:
+			return !!loongson_sysconf.suspend_addr;
+		default:
+			return 0;
+		}
 
 	default:
 		return 0;
 	}
 }
 
+static int loongson_pm_begin(suspend_state_t state)
+{
+	if (state == PM_SUSPEND_MEM)
+		pm_set_suspend_via_firmware();
+
+	return 0;
+}
+
+static void loongson_pm_end(void)
+{
+}
+
 static const struct platform_suspend_ops loongson_pm_ops = {
 	.valid	= loongson_pm_valid_state,
+	.begin	= loongson_pm_begin,
 	.enter	= loongson_pm_enter,
+	.end	= loongson_pm_end,
 };
 
 static int __init loongson_pm_init(void)
diff --git a/arch/mips/loongson64/lemote-2f/pm.c b/arch/mips/loongson64/lemote-2f/pm.c
index cac4d382..493de3b6 100644
--- a/arch/mips/loongson64/lemote-2f/pm.c
+++ b/arch/mips/loongson64/lemote-2f/pm.c
@@ -138,12 +138,12 @@ int wakeup_loongson(void)
 	return 0;
 }
 
-void __weak mach_suspend(void)
+void mach_suspend(void)
 {
 	disable_mfgpt0_counter();
 }
 
-void __weak mach_resume(void)
+void mach_resume(void)
 {
 	enable_mfgpt0_counter();
 }
diff --git a/arch/mips/loongson64/loongson-3/Makefile b/arch/mips/loongson64/loongson-3/Makefile
index 5090201b..f638eff4 100644
--- a/arch/mips/loongson64/loongson-3/Makefile
+++ b/arch/mips/loongson64/loongson-3/Makefile
@@ -7,4 +7,6 @@ obj-$(CONFIG_SMP)	+= smp.o
 
 obj-$(CONFIG_NUMA)	+= numa.o
 
+obj-$(CONFIG_SUSPEND)	+= pm.o sleep.o
+
 obj-$(CONFIG_RS780_HPET) += hpet.o
diff --git a/arch/mips/loongson64/loongson-3/acpi_init.c b/arch/mips/loongson64/loongson-3/acpi_init.c
index dbdad79e..5f7030b5 100644
--- a/arch/mips/loongson64/loongson-3/acpi_init.c
+++ b/arch/mips/loongson64/loongson-3/acpi_init.c
@@ -77,6 +77,35 @@ static void acpi_hw_clear_status(void)
 	outl(inl(ACPI_GPE0_BLK), ACPI_GPE0_BLK);
 }
 
+void acpi_sleep_prepare(void)
+{
+	u16 value;
+
+	acpi_hw_clear_status();
+
+	/* PMEnable: Enable PwrBtn */
+	value = inw(ACPI_PM_EVT_BLK + 2);
+	value |= 1 << 8;
+	outw(value, ACPI_PM_EVT_BLK + 2);
+
+	/* Turn ON LED blink */
+	value = pm_ioread(0x7c);
+	value = (value & ~0xc) | 0x8;
+	pm_iowrite(0x7c, value);
+}
+
+void acpi_sleep_complete(void)
+{
+	u8 value;
+
+	acpi_hw_clear_status();
+
+	/* Turn OFF LED blink */
+	value = pm_ioread(0x7c);
+	value |= 0xc;
+	pm_iowrite(0x7c, value);
+}
+
 void acpi_registers_setup(void)
 {
 	u32 value;
diff --git a/arch/mips/loongson64/loongson-3/pm.c b/arch/mips/loongson64/loongson-3/pm.c
new file mode 100644
index 00000000..93b74f7d
--- /dev/null
+++ b/arch/mips/loongson64/loongson-3/pm.c
@@ -0,0 +1,147 @@
+/*
+ *  Lemote Loongson-3A family machines' specific suspend support
+ *
+ *  Copyright (C) 2009 Lemote Inc.
+ *  Author: Wu Zhangjin <wuzhangjin@gmail.com>
+ *  Author: Chen Huacai <chenhuacai@gmail.com>
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation; either version 2 of the License, or
+ * (at your option) any later version.
+ */
+
+#include <linux/suspend.h>
+#include <linux/interrupt.h>
+#include <linux/pm.h>
+#include <linux/i8042.h>
+#include <linux/module.h>
+#include <linux/pci.h>
+#include <linux/delay.h>
+
+#include <asm/i8259.h>
+#include <asm/mipsregs.h>
+#include <asm/bootinfo.h>
+#include <asm/tlbflush.h>
+
+#include <loongson.h>
+#include <ec_wpce775l.h>
+
+#define I8042_CTR_KBDINT	0x01
+#define I8042_CTR_KBDDIS	0x10
+#define I8042_KBD_IRQ		1
+
+extern void irq_router_init(void);
+extern void acpi_sleep_prepare(void);
+extern void acpi_sleep_complete(void);
+extern void acpi_registers_setup(void);
+
+struct loongson_registers {
+	u32 config4;
+	u32 config6;
+	u64 pgd;
+	u64 kpgd;
+	u32 pwctl;
+	u64 pwbase;
+	u64 pwsize;
+	u64 pwfield;
+};
+
+static unsigned char i8042_ctr;
+static struct loongson_registers loongson_regs;
+
+static int i8042_enable_kbd_port(void)
+{
+	if (i8042_command(&i8042_ctr, I8042_CMD_CTL_RCTR)) {
+		pr_err("i8042.c: Can't read CTR while enabling i8042 kbd port."
+		       "\n");
+		return -EIO;
+	}
+
+	i8042_ctr &= ~I8042_CTR_KBDDIS;
+	i8042_ctr |= I8042_CTR_KBDINT;
+
+	if (i8042_command(&i8042_ctr, I8042_CMD_CTL_WCTR)) {
+		i8042_ctr &= ~I8042_CTR_KBDINT;
+		i8042_ctr |= I8042_CTR_KBDDIS;
+		pr_err("i8042.c: Failed to enable KBD port.\n");
+
+		return -EIO;
+	}
+
+	return 0;
+}
+
+void setup_wakeup_events(void)
+{
+	/* open the keyboard irq in i8259A */
+	outb_p((0xff & ~(1 << I8042_KBD_IRQ)), PIC_MASTER_IMR);
+	/* enable keyboard port */
+	i8042_enable_kbd_port();
+}
+
+int wakeup_loongson(void)
+{
+	int irq;
+
+	/* query the interrupt number */
+	irq = LOONGSON_HT1_INT_VECTOR(0);
+
+	if (irq & (1<<I8042_KBD_IRQ)) {
+		return 1;
+	}
+
+	return 0;
+}
+
+void mach_suspend(suspend_state_t state)
+{
+	if (state == PM_SUSPEND_MEM) {
+		acpi_sleep_prepare();
+
+		if (cpu_has_ftlb) {
+			loongson_regs.config4 = read_c0_config4();
+			loongson_regs.config6 = read_c0_config6();
+		}
+
+		if (cpu_has_ldpte) {
+			loongson_regs.pgd = read_c0_pgd();
+			loongson_regs.kpgd = read_c0_kpgd();
+			loongson_regs.pwctl = read_c0_pwctl();
+			loongson_regs.pwbase = read_c0_pwbase();
+			loongson_regs.pwsize = read_c0_pwsize();
+			loongson_regs.pwfield = read_c0_pwfield();
+		}
+	}
+
+	/* Workaround: disable spurious IRQ1 via EC */
+	if (state == PM_SUSPEND_STANDBY) {
+		ec_write_noindex(CMD_RESET, STANDBY_ON);
+		mdelay(774);
+	}
+}
+
+void mach_resume(suspend_state_t state)
+{
+	if (state == PM_SUSPEND_MEM) {
+		local_flush_tlb_all();
+
+		if (cpu_has_ftlb) {
+			write_c0_config4(loongson_regs.config4);
+			write_c0_config6(loongson_regs.config6);
+		}
+
+		if (cpu_has_ldpte) {
+			write_c0_pgd(loongson_regs.pgd);
+			write_c0_kpgd(loongson_regs.kpgd);
+			write_c0_pwctl(loongson_regs.pwctl);
+			write_c0_pwbase(loongson_regs.pwbase);
+			write_c0_pwsize(loongson_regs.pwsize);
+			write_c0_pwfield(loongson_regs.pwfield);
+		}
+
+		irq_router_init();
+		acpi_registers_setup();
+		acpi_sleep_complete();
+	}
+}
diff --git a/arch/mips/loongson64/loongson-3/sleep.S b/arch/mips/loongson64/loongson-3/sleep.S
new file mode 100644
index 00000000..329c7a20
--- /dev/null
+++ b/arch/mips/loongson64/loongson-3/sleep.S
@@ -0,0 +1,172 @@
+/*
+ * This file is subject to the terms and conditions of the GNU General Public
+ * License.  See the file "COPYING" in the main directory of this archive
+ * for more details.
+ *
+ * Sleep helper for Loongson-3A sleep mode, derived from Au1xxx.
+ *
+ * Copyright (C) 2011 Huacai Chen <chenhc@lemote.com>
+ */
+
+#include <asm/asm.h>
+#include <asm/asmmacro.h>
+#include <asm/mipsregs.h>
+#include <asm/stackframe.h>
+
+	.extern cmos_write64
+	.extern loongson_nr_nodes
+	.extern loongson_suspend_addr
+	.extern loongson_pcache_ways
+	.extern loongson_pcache_sets
+	.extern loongson_pcache_linesz
+	.extern loongson_scache_ways
+	.extern loongson_scache_sets
+	.extern loongson_scache_linesz
+
+	.text
+	.set push
+	.set noat
+	.set reorder
+	.align	5
+	.set	mips64
+
+/* preparatory stuff */
+.macro	SETUP_SLEEP
+	dsubu	sp, PT_SIZE
+	sd	$1, PT_R1(sp)
+	sd	$2, PT_R2(sp)
+	sd	$3, PT_R3(sp)
+	sd	$4, PT_R4(sp)
+	sd	$5, PT_R5(sp)
+	sd	$6, PT_R6(sp)
+	sd	$7, PT_R7(sp)
+	sd	$16, PT_R16(sp)
+	sd	$17, PT_R17(sp)
+	sd	$18, PT_R18(sp)
+	sd	$19, PT_R19(sp)
+	sd	$20, PT_R20(sp)
+	sd	$21, PT_R21(sp)
+	sd	$22, PT_R22(sp)
+	sd	$23, PT_R23(sp)
+	sd	$26, PT_R26(sp)
+	sd	$27, PT_R27(sp)
+	sd	$28, PT_R28(sp)
+	sd	$30, PT_R30(sp)
+	sd	$31, PT_R31(sp)
+	mfc0	k0, CP0_STATUS
+	sw	k0, PT_R8(sp)
+	mfc0	k0, CP0_CONFIG, 0
+	sw	k0, PT_R9(sp)
+	mfc0	k0, CP0_PAGEMASK, 0  /* Loongson-3 has sub-registers */
+	sw	k0, PT_R10(sp)
+	mfc0	k0, CP0_PAGEMASK, 1  /* Loongson-3 has sub-registers */
+	sw	k0, PT_R11(sp)
+	dmfc0	k0, CP0_CONTEXT
+	sd	k0, PT_R12(sp)
+	dmfc0	k0, CP0_XCONTEXT
+	sd	k0, PT_R13(sp)
+
+	/* Now set up the "wakeup vector" in  RTC space so the boot rom will
+	 * return to this point upon wakeup.
+	 * 0x40 : RA,  0x48 : SP
+	 */
+	daddi	a0, sp, 0
+	li      a1, 0x48
+	jal     cmos_write64
+	dla	a0, wakeup_start	/* resume path */
+	li      a1, 0x40
+	jal     cmos_write64
+.endm
+
+/* sleep code for Loongson-3A memory controller type */
+LEAF(loongson_suspend_lowlevel)
+	SETUP_SLEEP
+
+	/* a0:address a1:L1_sets a2:L1_ways a3:L1_linesize */
+	li a0, 0x80000000
+	lw a1, loongson_pcache_sets
+	lw a2, loongson_pcache_ways
+	lw a3, loongson_pcache_linesz
+flushL1:
+	move  t0, a2
+1:	cache 0, (a0)
+	cache 1, (a0)
+	addiu a0, a0, 1
+	addiu t0, t0, -1
+	bnez  t0, 1b
+	subu  a0, a0, a2
+	addu  a0, a0, a3
+	addiu a1, a1, -1
+	bnez  a1, flushL1
+
+	/* a0:nr_nodes a1:address a2:L2_sets a3:L2_ways t8:L2_linesize */
+	lw  a0, loongson_nr_nodes
+	dli a1, 0x9800000000000000
+	lw  a3, loongson_scache_ways
+	lw  t8, loongson_scache_linesz
+flushL2_all:
+	lw  a2, loongson_scache_sets
+	dli t9, 0x100000000000
+flushL2_node:
+	move   t0, a3
+1:	cache  3, (a1)
+	daddiu a1, a1, 1
+	addiu  t0, t0, -1
+	bnez   t0, 1b
+	dsubu  a1, a1, a3
+	daddu  a1, a1, t8
+	addiu  a2, a2, -1
+	bnez   a2, flushL2_node
+	daddu  a1, a1, t9
+	addiu  a0, a0, -1
+	bnez   a0, flushL2_all
+
+	ld  v0, loongson_suspend_addr /* Call BIOS's STR sleep routine */
+	jr  v0
+	nop
+END(loongson_suspend_lowlevel)
+
+	/* This is where we return upon wakeup.
+	 * Reload all of the registers and return.
+	 */
+LEAF(wakeup_start)
+	lw	k0, PT_R8(sp)
+	mtc0	k0, CP0_STATUS
+	lw	k0, PT_R9(sp)
+	mtc0	k0, CP0_CONFIG, 0
+	lw	k0, PT_R10(sp)
+	mtc0	k0, CP0_PAGEMASK, 0
+	lw	k0, PT_R11(sp)
+	mtc0	k0, CP0_PAGEMASK, 1
+	ld	k0, PT_R12(sp)
+	dmtc0	k0, CP0_CONTEXT
+	ld	k0, PT_R13(sp)
+	dmtc0	k0, CP0_XCONTEXT
+
+	nop
+	ld	$1, PT_R1(sp)
+	ld	$2, PT_R2(sp)
+	ld	$3, PT_R3(sp)
+	ld	$4, PT_R4(sp)
+	ld	$5, PT_R5(sp)
+	ld	$6, PT_R6(sp)
+	ld	$7, PT_R7(sp)
+	ld	$16, PT_R16(sp)
+	ld	$17, PT_R17(sp)
+	ld	$18, PT_R18(sp)
+	ld	$19, PT_R19(sp)
+	ld	$20, PT_R20(sp)
+	ld	$21, PT_R21(sp)
+	ld	$22, PT_R22(sp)
+	ld	$23, PT_R23(sp)
+	ld	$26, PT_R26(sp)
+	ld	$27, PT_R27(sp)
+	ld	$28, PT_R28(sp)
+	ld	$30, PT_R30(sp)
+	ld	$31, PT_R31(sp)
+
+	daddiu	sp, PT_SIZE
+	jr	ra
+END(wakeup_start)
+
+	.set pop
-- 
2.11.0

