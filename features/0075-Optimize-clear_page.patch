From 462c8193b835882645789a48f7df92c1b2825aa5 Mon Sep 17 00:00:00 2001
From: chenj <chenj@lemote.com>
Date: Thu, 20 Feb 2014 10:53:17 +0800
Subject: [PATCH 075/130] Optimize clear_page

arch/mips/mm/uasm.c Hunk #2 modified by Junde Yhi.

Change-Id: Ia7c12cc468d116c578217bd9566f53cc3a177511
Signed-off-by: Zhang Shuangshuang <zhangshuangshuang@ict.ac.cn>
---
 arch/mips/include/asm/uasm.h      |  5 +++++
 arch/mips/include/uapi/asm/inst.h |  7 +++++++
 arch/mips/mm/page.c               |  9 +++++++++
 arch/mips/mm/uasm-mips.c          | 24 ++++++++++++++++++++++++
 arch/mips/mm/uasm.c               | 12 +++++++++++-
 5 files changed, 56 insertions(+), 1 deletion(-)

diff --git a/arch/mips/include/asm/uasm.h b/arch/mips/include/asm/uasm.h
index b6ecfeee..e8797fe3 100644
--- a/arch/mips/include/asm/uasm.h
+++ b/arch/mips/include/asm/uasm.h
@@ -70,6 +70,10 @@ void ISAOPC(op)(u32 **buf, unsigned int a, signed int b, unsigned int c)
 #define Ip_s3s1s2(op)							\
 void ISAOPC(op)(u32 **buf, int a, int b, int c)

+#define Ip_u4u2u1s3(op)						\
+void ISAOPC(op)(u32 **buf, unsigned int a, unsigned int b, signed int c, \
+	   unsigned int d)
+
 #define Ip_u2u1s3(op)							\
 void ISAOPC(op)(u32 **buf, unsigned int a, unsigned int b, signed int c)

@@ -150,6 +154,7 @@ Ip_u2u1u3(_rotr);
 Ip_u2s3u1(_sc);
 Ip_u2s3u1(_scd);
 Ip_u2s3u1(_sd);
+Ip_u4u2u1s3(_gssq);
 Ip_u2u1u3(_sll);
 Ip_u3u2u1(_sllv);
 Ip_s3s1s2(_slt);
diff --git a/arch/mips/include/uapi/asm/inst.h b/arch/mips/include/uapi/asm/inst.h
index eb95d9fe..904a7ca5 100644
--- a/arch/mips/include/uapi/asm/inst.h
+++ b/arch/mips/include/uapi/asm/inst.h
@@ -93,6 +93,13 @@ enum spec3_op {
 };

 /*
+ * func field of spec opcode.
+ */
+enum swc2_op {
+	gssq_op = 0x20,
+};
+
+/*
  * rt field of bcond opcodes.
  */
 enum rt_op {
diff --git a/arch/mips/mm/page.c b/arch/mips/mm/page.c
index c41953ca..6ab08061 100644
--- a/arch/mips/mm/page.c
+++ b/arch/mips/mm/page.c
@@ -219,6 +219,11 @@ static void set_prefetch_parameters(void)
 		else if (cpu_has_cache_cdex_p)
 			cache_line_size = cpu_dcache_line_size();
 	}
+
+#ifdef CONFIG_CPU_LOONGSON3
+	clear_word_size = 16;
+#endif
+
 	/*
 	 * Too much unrolling will overflow the available space in
 	 * clear_space_array / copy_page_array.
@@ -233,11 +238,15 @@ static void set_prefetch_parameters(void)

 static void build_clear_store(u32 **buf, int off)
 {
+#ifdef CONFIG_CPU_LOONGSON3
+	uasm_i_gssq(buf, ZERO, ZERO, off, A0);
+#else
 	if (cpu_has_64bit_gp_regs || cpu_has_64bit_zero_reg) {
 		uasm_i_sd(buf, ZERO, off, A0);
 	} else {
 		uasm_i_sw(buf, ZERO, off, A0);
 	}
+#endif
 }

 static inline void build_clear_pref(u32 **buf, int off)
diff --git a/arch/mips/mm/uasm-mips.c b/arch/mips/mm/uasm-mips.c
index 9c2220a4..8e856e89 100644
--- a/arch/mips/mm/uasm-mips.c
+++ b/arch/mips/mm/uasm-mips.c
@@ -28,6 +28,10 @@
 #define RT_SH		16
 #define SCIMM_MASK	0xfffff
 #define SCIMM_SH	6
+#define RZ_MASK		0x1f
+#define RZ_SH		0
+#define RC_MASK		0x1ff
+#define RC_SH		6

 /* This macro sets the non-variable bits of an instruction. */
 #define M(a, b, c, d, e, f)					\
@@ -155,6 +159,7 @@ static struct insn insn_table[] = {
 	{ insn_yield, M(spec3_op, 0, 0, 0, 0, yield_op), RS | RD },
 	{ insn_ldpte, M(lwc2_op, 0, 0, 0, ldpte_op, mult_op), RS | RD },
 	{ insn_lddir, M(lwc2_op, 0, 0, 0, lddir_op, mult_op), RS | RT | RD },
+	{ insn_gssq, M(swc2_op, 0, 0, 0, 0, gssq_op), RT | RS | RZ | RC },
 	{ insn_invalid, 0, 0 }
 };

@@ -178,6 +183,21 @@ static inline u32 build_jimm(u32 arg)
 	return (arg >> 2) & JIMM_MASK;
 }

+static inline u32 build_rz(u32 arg)
+{
+	WARN(arg & ~RZ_MASK, KERN_WARNING "Micro-assembler field overflow\n");
+
+	return (arg & RZ_MASK) << RZ_SH;
+}
+
+static inline u32 build_rc(s32 arg)
+{
+	WARN((arg >> 4) > 0xff ||
+	     (arg >> 4) < -0x100, KERN_WARNING "Micro-assembler field overflow\n");
+
+	return ((arg >> 4) & RC_MASK) << RC_SH;
+}
+
 /*
  * The order of opcode arguments is implicitly left to right,
  * starting with RS and ending with FUNC or IMM.
@@ -208,6 +228,10 @@ static void build_insn(u32 **buf, enum opcode opc, ...)
 		op |= build_rd(va_arg(ap, u32));
 	if (ip->fields & RE)
 		op |= build_re(va_arg(ap, u32));
+	if (ip->fields & RZ)
+		op |= build_rz(va_arg(ap, u32));
+	if (ip->fields & RC)
+		op |= build_rc(va_arg(ap, s32));
 	if (ip->fields & SIMM)
 		op |= build_simm(va_arg(ap, s32));
 	if (ip->fields & UIMM)
diff --git a/arch/mips/mm/uasm.c b/arch/mips/mm/uasm.c
index ad718deb..a690d75f 100644
--- a/arch/mips/mm/uasm.c
+++ b/arch/mips/mm/uasm.c
@@ -26,6 +26,8 @@ enum fields {
 	SET = 0x200,
 	SCIMM = 0x400,
 	SIMM9 = 0x800,
+	RZ = 0x1000,
+	RC = 0x2000
 };

 #define OP_MASK		0x3f
@@ -60,7 +62,7 @@ enum opcode {
 	insn_sllv, insn_slt, insn_sltiu, insn_sltu, insn_sra, insn_srl,
 	insn_srlv, insn_subu, insn_sw, insn_sync, insn_syscall, insn_tlbp,
 	insn_tlbr, insn_tlbwi, insn_tlbwr, insn_wait, insn_wsbh, insn_xor,
-	insn_xori, insn_yield, insn_lddir, insn_ldpte,
+	insn_xori, insn_yield, insn_lddir, insn_ldpte, insn_gssq,
 };

 struct insn {
@@ -193,6 +195,13 @@ Ip_u2s3u1(op)						\
 }							\
 UASM_EXPORT_SYMBOL(uasm_i##op);

+#define I_u4u2u1s3(op)					\
+Ip_u4u2u1s3(op)						\
+{							\
+	build_insn(buf, insn##op, d, b, a, c);		\
+}							\
+UASM_EXPORT_SYMBOL(uasm_i##op);
+
 #define I_u2u1s3(op)					\
 Ip_u2u1s3(op)						\
 {							\
@@ -308,6 +317,7 @@ I_0(_rfe)
 I_u2s3u1(_sc)
 I_u2s3u1(_scd)
 I_u2s3u1(_sd)
+I_u4u2u1s3(_gssq)
 I_u2u1u3(_sll)
 I_u3u2u1(_sllv)
 I_s3s1s2(_slt)
--
2.11.0
