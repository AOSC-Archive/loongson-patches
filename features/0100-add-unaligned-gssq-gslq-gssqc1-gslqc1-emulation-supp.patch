From 8f8d243871590c99325bcb0fc2f840271ae9f95d Mon Sep 17 00:00:00 2001
From: Huang Pei <huangpei@loongson.cn>
Date: Tue, 26 Jul 2016 22:53:46 +0800
Subject: [PATCH 100/130] add unaligned gssq/gslq/gssqc1/gslqc1 emulation
 support

Change-Id: I5b4bca39ae1c974643d063f1afdcda85c456f685
---
 arch/mips/include/uapi/asm/inst.h | 12 ++++++
 arch/mips/kernel/unaligned.c      | 79 +++++++++++++++++++++++++++++++++++++++
 2 files changed, 91 insertions(+)

diff --git a/arch/mips/include/uapi/asm/inst.h b/arch/mips/include/uapi/asm/inst.h
index 09fc521a..fb701072 100644
--- a/arch/mips/include/uapi/asm/inst.h
+++ b/arch/mips/include/uapi/asm/inst.h
@@ -888,6 +888,17 @@ struct loongson3_lsdc2_format {	/* Loongson3 overridden ldc2/sdc2 Load/Store for
 	;))))))
 };
 
+struct loongson3_lswc2_format {	/* Loongson3 overridden lwc2/swc2 Load/Store format */
+	__BITFIELD_FIELD(unsigned int opcode : 6,
+	__BITFIELD_FIELD(unsigned int base : 5,
+	__BITFIELD_FIELD(unsigned int rt : 5,
+	__BITFIELD_FIELD(unsigned int fr : 1,
+	__BITFIELD_FIELD(unsigned int offset : 9,
+	__BITFIELD_FIELD(unsigned int ls : 1,
+	__BITFIELD_FIELD(unsigned int rq: 5,
+	;)))))))
+};
+
 /*
  * MIPS16e instruction formats (16-bit length)
  */
@@ -984,6 +995,7 @@ union mips_instruction {
 	struct mm16_r3_format mm16_r3_format;
 	struct mm16_r5_format mm16_r5_format;
 	struct loongson3_lsdc2_format loongson3_lsdc2_format;
+	struct loongson3_lswc2_format loongson3_lswc2_format;
 };
 
 union mips16e_instruction {
diff --git a/arch/mips/kernel/unaligned.c b/arch/mips/kernel/unaligned.c
index 8d58fbf4..868c8cf7 100644
--- a/arch/mips/kernel/unaligned.c
+++ b/arch/mips/kernel/unaligned.c
@@ -885,6 +885,7 @@ static void emulate_load_store_insn(struct pt_regs *regs,
 {
 	union mips_instruction insn;
 	unsigned long value;
+	unsigned long value1;
 	unsigned int res, preempted;
 	unsigned long origpc;
 	unsigned long orig31;
@@ -1453,7 +1454,85 @@ static void emulate_load_store_insn(struct pt_regs *regs,
 		}
 		break;
 
+	case swc2_op:
+		if(insn.loongson3_lswc2_format.ls == 0)
+			goto sigbus;
+
+		/* gssq */
+		if (insn.loongson3_lswc2_format.fr == 0) {
+			if (!access_ok(VERIFY_WRITE, addr, 16))
+				goto sigbus;
+			/* write upper 8 bypte first */
+			value1 = regs->regs[insn.loongson3_lswc2_format.rq];
+
+			StoreDW(addr + 8, value1, res);
+			if (res)
+				goto fault;
+			value = regs->regs[insn.loongson3_lswc2_format.rt];
 
+			StoreDW(addr, value, res);
+			if (res)
+				goto fault;
+			compute_return_epc(regs);
+
+		/* gssqc1 */
+		} else {
+			if (!access_ok(VERIFY_WRITE, addr, 16))
+				goto sigbus;
+
+			lose_fpu(1);
+			value1 = get_fpr64(current->thread.fpu.fpr, insn.loongson3_lswc2_format.rq);
+
+			StoreDW(addr + 8, value1, res);
+			if (res)
+				goto fault;
+			value = get_fpr64(current->thread.fpu.fpr, insn.loongson3_lswc2_format.rt);
+
+			StoreDW(addr, value, res);
+			if (res)
+				goto fault;
+			compute_return_epc(regs);
+			own_fpu(1);
+		}
+		break;
+	case lwc2_op:
+		if(insn.loongson3_lswc2_format.ls == 0)
+			goto sigbus;
+		/* gslq */
+		if (insn.loongson3_lswc2_format.fr == 0) {
+			if (!access_ok(VERIFY_READ, addr, 16))
+				goto sigbus;
+
+			LoadDW(addr, value, res);
+			if (res)
+				goto fault;
+
+			LoadDW(addr + 8, value1, res);
+			if (res)
+				goto fault;
+			regs->regs[insn.loongson3_lswc2_format.rt] = value;
+			regs->regs[insn.loongson3_lswc2_format.rq] = value1;
+			compute_return_epc(regs);
+
+		/* gslqc1 */
+		} else {
+			if (!access_ok(VERIFY_READ, addr, 16))
+				goto sigbus;
+
+			lose_fpu(1);
+			LoadDW(addr, value, res);
+			if (res)
+				goto fault;
+			LoadDW(addr+8, value1, res);
+			if (res)
+				goto fault;
+
+			set_fpr64(current->thread.fpu.fpr, insn.loongson3_lswc2_format.rt, value);
+			set_fpr64(current->thread.fpu.fpr, insn.loongson3_lswc2_format.rq, value1);
+			compute_return_epc(regs);
+			own_fpu(1);
+		}
+		break;
 #else
 #ifndef CONFIG_CPU_MIPSR6
 	/*
-- 
2.11.0

